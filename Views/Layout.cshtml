@using Bootstrap
@using Orchard
@functions 
{
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix) {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }

    void RegisterAppleLink(string size, string href) {
        var link = new Orchard.UI.Resources.LinkEntry {Rel = "apple-touch-icon", Href = href};
        link.AddAttribute("sizes", size);
        RegisterLink(link);
    }
}
@{
    bool useFixedNav = WorkContext.SettingsEval(Constants.UseFixedNav);
    bool useFluidLayout = WorkContext.SettingsEval(Constants.UseFluidLayout);
    bool useNavSearch = WorkContext.SettingsEval(Constants.UseNavSearch);
    bool useStickyFooter = WorkContext.SettingsEval(Constants.UseStickyFooter);
    bool useInverseNav = WorkContext.SettingsEval(Constants.UseInverseNav);

    /* Global includes for the theme
    ***************************************************************/

    SetMeta("charset", "utf-8");
    SetMeta("description", "");
    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");
    SetMeta("viewport", "width=device-width, initial-scale=1.0");

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass)) {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle triple widget zones on and off
    var tripleClass = CalcuClassify(new[] { "TripleFirst", "TripleSecond", "TripleThird" }, "triple-"); // for triple-1, triple-2, etc. if any of the triple zones are filled
    if (HasText(tripleClass)) {
        Model.Classes.Add(tripleClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass)) {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.Header.Add(New.Branding(), "0"); // Site name and link to the home page
    WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Raptor Concepts
    WorkContext.Layout.Navigation.Add(New.User(), "5"); // Login and dashboard links

    if (useNavSearch) {
        WorkContext.Layout.Navigation.Add(New.SearchNav(), "10"); // Search box (requires Search module)
    }

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
    var containerClass = useFluidLayout ? "container-fluid" : "container";
    var rowClass = useFluidLayout ? "row-fluid" : "row";
    var fixedNavClass = useFixedNav ? "navbar-fixed-top" : "navbar-static-top";
    var inverseNavClass = useInverseNav ? "navbar-inverse" : string.Empty;
    var stickyFooterClass = useStickyFooter ? "min-height: 100%; height: auto !important; height: 100%; margin: 0 auto -115px;" : string.Empty;
    var asideCssClass = ThemeHelper.GetAsideCssClass(asideClass);
    var tripleCssClass = ThemeHelper.GetTripleCssClass(tripleClass);
    var footerQuadCssClass = ThemeHelper.GetFooterQuadCssClass(footerQuadClass);
}
<div id="layout-wrapper" style="@stickyFooterClass">

    <div class="navbar @fixedNavClass @inverseNavClass">
        <div class="navbar-inner">
            <div class="@containerClass">
                <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </a>
                @if (Model.Header != null) {
                    @Zone(Model.Header)
                }
                <div class="nav-collapse collapse" id="main-menu">
                    @if (Model.Navigation != null) {
                        @Zone(Model.Navigation)
                    }
                </div>
            </div>
        </div>
    </div>

    <section id="content">
        <div class="@containerClass">
            @if (Model.BeforeMain != null) {
                <div class="@rowClass">
                    <div class="span12">
                        @Zone(Model.BeforeMain)
                    </div>
                </div>
            }
            @if (Model.Featured != null) {
                <div class="@rowClass">
                    <div class="span12">
                        @Zone(Model.Featured)
                    </div>
                </div>
            }
            <div class="@rowClass">
                @if (Model.AsideFirst != null) {
                    <aside class="span3">
                        <div class="well">
                            @Zone(Model.AsideFirst)&nbsp;
                        </div>
                    </aside>
                }
                <div class="@asideCssClass">
                    @if (Model.Messages != null) {
                        @Zone(Model.Messages)
                    }
                    @if (Model.BeforeContent != null) {
                        @Zone(Model.BeforeContent)
                    }
                    @if (Model.Content != null) {
                        @Zone(Model.Content)
                    }
                    @if (Model.AfterContent != null) {
                        @Zone(Model.AfterContent)
                    }
                </div>
                @if (Model.AsideSecond != null) {
                    <aside class="span3">
                        <div class="well">
                            @Zone(Model.AsideSecond)&nbsp;
                        </div>
                    </aside>
                }
            </div>
            @if (Model.AfterMain != null) {
                <div class="@rowClass">
                    <div class="span12">
                        @Zone(Model.AfterMain)
                    </div>
                </div>
            }
            @if (Model.TripleFirst != null || Model.TripleSecond != null || Model.TripleThird != null) {
                <div class="@rowClass">
                    @if (Model.TripleFirst != null) {
                        <!-- start: Triple -->
                        <div class="@tripleCssClass">
                            @Zone(Model.TripleFirst)
                        </div>
                        <!-- end: Triple -->
                    }
                    @if (Model.TripleSecond != null) {
                        <!-- start: Triple -->
                    <div class="@tripleCssClass">
                        @Zone(Model.TripleSecond)
                    </div>
                        <!-- end: Triple -->
                    }
                    @if (Model.TripleThird != null) {
                        <!-- start: Triple -->
                    <div class="@tripleCssClass">
                        @Zone(Model.TripleThird)
                    </div>
                        <!-- end: Triple -->
                    }
                </div>
            }
            @if (Model.FooterQuadFirst != null || Model.FooterQuadSecond != null || Model.FooterQuadThird != null || Model.FooterQuadFourth != null) {
                <hr />
                <div class="@rowClass">
                    @if (Model.FooterQuadFirst != null) {
                        <div class="@footerQuadCssClass">
                            @Zone(Model.FooterQuadFirst)
                        </div>
                    }
                    @if (Model.FooterQuadSecond != null) {
                    <div class="@footerQuadCssClass">
                        @Zone(Model.FooterQuadSecond)
                    </div>
                    }
                    @if (Model.FooterQuadThird != null) {
                    <div class="@footerQuadCssClass">
                        @Zone(Model.FooterQuadThird)
                    </div>
                    }
                    @if (Model.FooterQuadFourth != null) {
                    <div class="@footerQuadCssClass">
                        @Zone(Model.FooterQuadFourth)
                    </div>
                    }
                </div>
            }
        </div>
    </section>
    @if (useStickyFooter) {
        <div id="push"></div>
    }
</div>
<footer id="footer">
    <div class="@containerClass">
        <hr />
        @if (Model.Footer != null) {
            <div class="@containerClass">
                <div class="@rowClass">
                    @Zone(Model.Footer)
                </div>
            </div>
        }
    </div>
</footer>
<div id="toTop">
    <h1><i class="icon-chevron-sign-up"></i></h1>
</div>
@if (Model.FooterScript != null) {
    <text>@Zone(Model.FooterScript)</text>
}